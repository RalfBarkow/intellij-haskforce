HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Layout00025')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.import ('import')
WHITE_SPACE ('           ')
HaskellTokenType.conidRegexp ('Text.Parsec')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE ('           ')
HaskellTokenType.conidRegexp ('Text.Parsec.String')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('testParser')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Parser')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Char')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('testParser')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('char')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''c'')
WHITE_SPACE ('\n    ')
HaskellTokenType.Varsym ('<?>')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('char c expected')
HaskellTokenType." ('"')