#!/usr/bin/env python3

# Builds the plugin and packages into a zip archive.
#
# If the version in plugin.xml contains SNAPSHOT, the git rev will be appended.
# If the git tree is dirty, the 'dirty' will be appended to the version.
# A new plugin.xml is created in /tmp and used by ant, so the original plugin.xml
# is not affected.

import os
from subprocess import Popen, PIPE
import sys
import time
import xml.etree.ElementTree as ET


def main():
    root_dir = os.path.realpath(os.path.join(os.path.dirname(sys.argv[0]), '..'))
    tree = ET.parse(os.path.join(root_dir, 'META-INF', 'plugin.xml'))
    root = tree.getroot()
    version = root.find('version')
    if version is None:
        fail("Failed to find version tag in plugin.xml\n")
    version_text = version.text
    if 'SNAPSHOT' in version_text:
        version_text += '-' + git_rev()
    if git_dirty():
        version_text += '-dirty'
    version.text = version_text
    tmp_dir = gen_tmp_dir()
    plugin_xml = os.path.join(tmp_dir, 'plugin.xml')
    tree.write(plugin_xml)
    ant_build_modules(plugin_xml)


def ant_build_modules(plugin_xml):
    p = Popen(["ant", "-Dplugin.xml=%s" % plugin_xml, "build.modules"])
    p.wait()


def fail(msg):
    sys.stderr.write(message + '\n')
    exit(1)


def git_rev():
    p = Popen(["git", "rev-parse", "--short", "HEAD"], stdout=PIPE)
    return p.stdout.read().strip().decode('utf-8')


def git_dirty():
    p = Popen(["git", "diff-index", "--quiet", "HEAD"])
    return p.wait() != 0


def epoch():
    return int(time.time())


def gen_tmp_dir():
    d = '/tmp/haskforce-%s' % epoch()
    os.mkdir(d)
    return d


if __name__ == '__main__':
    main()
