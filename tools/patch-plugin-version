#!/usr/bin/env python3

# Creates a new plugin.xml file with the version patched.

import argparse
import os
from subprocess import Popen, PIPE
import sys
import time
import xml.etree.ElementTree as ET


def main(args):
    tree = ET.parse(args.plugin_xml)
    root = tree.getroot()
    version = root.find('version')
    if version is None:
        fail("Failed to find version tag in plugin.xml\n")
    version_text = version.text
    if 'SNAPSHOT' in version_text:
        version_text += '-' + git_rev()
    if git_dirty():
        version_text += '-dirty'
    version.text = version_text
    if args.in_place:
        tree.write(args.plugin_xml)
    else:
        tmp_dir = gen_tmp_dir()
        tmp_plugin_xml = os.path.join(tmp_dir, 'plugin.xml')
        tree.write(tmp_plugin_xml)
        print(tmp_plugin_xml)


def parse_args():
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("plugin_xml")
    arg_parser.add_argument("-i", "--in-place", action='store_true')
    return arg_parser.parse_args()


def git_rev():
    p = Popen(["git", "rev-parse", "--short", "HEAD"], stdout=PIPE)
    return p.stdout.read().strip().decode('utf-8')


def git_dirty():
    p = Popen(["git", "diff-index", "--quiet", "HEAD"])
    return p.wait() != 0


def epoch():
    return int(time.time())


def gen_tmp_dir():
    d = '/tmp/haskforce-%s' % epoch()
    os.mkdir(d)
    return d


if __name__ == '__main__':
    main(parse_args())
